stages:
  - test
  - build
  - run
  - deploy

variables:
  KUBECONFIG: $KUBE_CONFIG

test_users:
  tags:
    - test
  stage: test
  image: python:3.7.7
  script:
    - cd build/users-img
    - pip install -r requirements.txt
    - python tests/auth.py
    - python tests/fake_db.py
    
test_orders:
  tags:
    - test
  stage: test
  image: python:3.7.7
  script:
    - cd build/orders-img
    - pip install -r requirements.txt
    - python tests/fake_db.py

build_gateway:
  tags:
    - test
  stage: build
  image: docker:19.03.12-dind
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - echo "Building Docker image..."
    - cd build/gateway-img
    - pwd
    - docker -v
    - echo "${DOCKER_AUTH_CONFIG}" > ~/.docker/config.json
    - docker login
    - docker build -t gateway:$CI_COMMIT_REF_SLUG .
    - docker tag gateway:$CI_COMMIT_REF_SLUG jhtyl13r/jenkins-gateway
    - docker push jhtyl13r/jenkins-gateway

build_orders:
  tags:
    - test
  stage: build
  image: docker:19.03.12-dind
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - echo "Building Docker image..."
    - cd build/orders-img
    - pwd
    - docker -v
    - echo "${DOCKER_AUTH_CONFIG}" > ~/.docker/config.json
    - docker login
    - docker build -t orders:$CI_COMMIT_REF_SLUG .
    - docker tag orders:$CI_COMMIT_REF_SLUG jhtyl13r/jenkins-orders
    - docker push jhtyl13r/jenkins-orders

build_users:
  tags:
    - test
  stage: build
  image: docker:19.03.12-dind
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - echo "Building Docker image..."
    - cd build/users-img
    - pwd
    - docker -v
    - echo "${DOCKER_AUTH_CONFIG}" > ~/.docker/config.json
    - docker login
    - docker build -t users:$CI_COMMIT_REF_SLUG .
    - docker tag users:$CI_COMMIT_REF_SLUG jhtyl13r/jenkins-users
    - docker push jhtyl13r/jenkins-users

run_docker_gateway:
  tags:
    - test
  stage: run
  image: docker:19.03.12-dind
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - echo "Running tests..."
    - cd build/gateway-img
    - pwd
    - docker -v
    - echo "${DOCKER_AUTH_CONFIG}" > ~/.docker/config.json
    - docker login
    - docker pull jhtyl13r/jenkins-gateway
    - docker rm -f gateway || true
    - docker run -d --name gateway jhtyl13r/jenkins-gateway
    - docker stop gateway
    - docker rm gateway

run_docker_orders:
  tags:
    - test
  stage: run
  image: docker:19.03.12-dind
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - echo "Running tests..."
    - cd build/orders-img
    - pwd
    - docker -v
    - echo "${DOCKER_AUTH_CONFIG}" > ~/.docker/config.json
    - docker login
    - docker pull jhtyl13r/jenkins-orders
    - docker rm -f orders || true
    - docker run -d --name orders jhtyl13r/jenkins-orders
    - sleep 10
    - docker stop orders
    - docker rm orders

run_docker_users:
  tags:
    - test
  stage: run
  image: docker:19.03.12-dind
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - echo "Running tests..."
    - cd build/users-img
    - pwd
    - docker -v
    - echo "${DOCKER_AUTH_CONFIG}" > ~/.docker/config.json
    - docker login
    - docker pull jhtyl13r/jenkins-users
    - docker rm -f users || true
    - docker run -d --name users jhtyl13r/jenkins-users
    - sleep 10
    - docker stop users
    - docker rm users

deploy_helm_dev:
  tags:
    - test
  stage: deploy
  image: dtzar/helm-kubectl
  script:
    - rm -Rf .kube
    - mkdir .kube
    - ls
    - cat $KUBE_CONFIG > .kube/config
    - echo "Uninstalling existing Helm release..."
    - helm uninstall app-dev -n dev || true
    - echo "Installing Helm release..."
    - helm install app-dev --namespace dev ./helm/charts/dev/ -f ./helm/charts/dev/values.yaml

deploy_helm_qa:
  tags:
    - test
  stage: deploy
  image: dtzar/helm-kubectl 
  script:
    - rm -Rf .kube
    - mkdir .kube
    - ls
    - cat $KUBE_CONFIG > .kube/config
    - echo "Uninstalling existing Helm release..."
    - helm uninstall app-qa -n qa || true
    - echo "Installing Helm release..."
    - helm install app-qa --namespace qa ./helm/charts/qa/ -f ./helm/charts/qa/values.yaml

deploy_helm_staging:
  tags:
    - test
  stage: deploy
  image: dtzar/helm-kubectl
  script:
    - rm -Rf .kube
    - mkdir .kube
    - ls
    - cat $KUBE_CONFIG > .kube/config
    - echo "Uninstalling existing Helm release..."
    - helm uninstall app-staging -n staging || true
    - echo "Installing Helm release..."
    - helm install app-staging --namespace staging ./helm/charts/staging/ -f ./helm/charts/staging/values.yaml
  
deploy_helm_prod:
  tags:
    - test
  stage: deploy
  image: dtzar/helm-kubectl
  script:
    - rm -Rf .kube
    - mkdir .kube
    - ls
    - cat $KUBE_CONFIG > .kube/config
    - echo "Uninstalling existing Helm release..."
    - helm uninstall app-prod -n prod || true
    - echo "Installing Helm release..."
    - helm install app-prod --namespace prod ./helm/charts/prod/ -f ./helm/charts/prod/values.yaml
  when: manual
  only:
    - main